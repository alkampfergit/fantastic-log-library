trigger:
 branches:
   include:
     - master
     - develop
     - feature/*
     - hotfix/*
     - release/*

jobs:

  - job: SonarQube
    pool: default
    condition: false

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 3.1.201'
      inputs:
        version: 3.1.201
        performMultiLevelLookup: true
    - task: PowerShell@2
      displayName: "Running Gitversion to determine version for SonarCloud"
      inputs:
        targetType: inline
        script: |
          dotnet tool restore
          $version = dotnet tool run dotnet-gitversion /config GitVersion.yml | Out-String | ConvertFrom-Json
          $assemblyVer = $version.AssemblySemVer
          Write-Host "Assembly semver is $assemblyVer"
          Write-Host "##vso[task.setvariable variable=assemblyVer;]$assemblyVer"

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'Sonar Cloud GitHub Gian Maria'
        organization: 'alkampfergit-github'
        scannerMode: 'MSBuild'
        projectKey: 'FantasticLogLibrary'
        projectName: 'FantasticLogLibrary'
        projectVersion: '$(assemblyVer)'

    - task: DotNetCoreCLI@2
      displayName: 'Running tests explicitly with cli task'
      inputs:
        command: 'test'
        projects: 'src/FantasticLogLibrary.Tests/FantasticLogLibrary.Tests.csproj'
        testRunTitle: 'UnitTests'
        arguments: '--configuration $(BuildConfiguration) --collect "Code coverage"'

    - task: PowerShell@2
      displayName: "Execute powershell to Run the build"
      inputs:
        targetType: filePath
        filePath: $(Build.SourcesDirectory)/build.ps1
        workingDirectory: $(Build.SourcesDirectory)
        arguments: -outFolder $(Build.ArtifactStagingDirectory) -skipTests $true -configuration $(BuildConfiguration) -pipelineName FantasticLogLibraryCi
        failOnStderr: true
        
    - task: SonarCloudAnalyze@1

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'


    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Artifacts'
      inputs:
        ArtifactName: Artifacts
  
  - job: MQAnalysis
    pool:
      vmImage: 'windows-2019'
    displayName: Perform MQ Analysis

    steps:

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 3.1.201'
      inputs:
        version: 3.1.201
        performMultiLevelLookup: true

    - powershell: |
          # Guide here https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/running-codeql-code-scanning-in-your-ci-system
          Write-Host "downloading Code QL analysis for windows"
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -uri https://github.com/github/codeql-action/releases/latest/download/codeql-runner-win.exe -OutFile $(Build.SourcesDirectory)\src\codeql-runner-win.exe
          Write-Host "Code QL analysis for windows downloaded, now we init it"
          cd $(Build.SourcesDirectory)\src
          pwd 
          & codeql-runner-win.exe init --github-url https://github.com --repository alkampfergit/fantastic-log-library --github-auth $(ghtoken) --languages csharp
          cat $(Build.SourcesDirectory)\src\codeql-runner\codeql-env.sh | Invoke-Expression
      displayName: 'Download MQ analysis and init'
          
    - task: PowerShell@2
      displayName: "Execute powershell to Run the build"
      inputs:
        targetType: filePath
        filePath: $(Build.SourcesDirectory)/build.ps1
        workingDirectory: $(Build.SourcesDirectory)
        arguments: -outFolder $(Build.ArtifactStagingDirectory) -skipTests $true -configuration $(BuildConfiguration) -pipelineName FantasticLogLibraryCi
        failOnStderr: true
    
    - powershell: |
          Write-Host "Analyzing with codeql"
          cd $(Build.SourcesDirectory)\src
          & codeql-runner-win.exe analyze --github-url https://github.com --repository alkampfergit/fantastic-log-library --github-auth $(ghtoken) --commit $(Build.SourceVersion) --ref $(Build.SourceBranch)